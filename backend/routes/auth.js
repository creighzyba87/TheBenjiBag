import express from 'express'; import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import { db } from '../db/index.js'; import crypto from 'crypto';
const router=express.Router(); const JWT_SECRET=process.env.JWT_SECRET||'change_me';
function ageYears(d){const x=new Date(d),n=new Date();let a=n.getFullYear()-x.getFullYear();const m=n.getMonth()-x.getMonth();if(m<0||(m===0&&n.getDate()<x.getDate()))a--;return a;}
router.post('/signup',async(req,res)=>{const {name,dob,phone,email,address,password}=req.body;if(!name||!dob||!phone||!email||!address||!password)return res.status(400).json({error:'All fields required'});if(ageYears(dob)<21)return res.status(403).json({error:'Must be 21+'});await db.read();if(db.data.users.find(u=>u.email.toLowerCase()===email.toLowerCase()))return res.status(409).json({error:'Account exists'});const id=crypto.randomUUID();const hash=await bcrypt.hash(password,10);db.data.users.push({id,role:'customer',name,dob,phone,email,address,passwordHash:hash,createdAt:new Date().toISOString()});await db.write();const token=jwt.sign({sub:id,role:'customer',name},JWT_SECRET,{expiresIn:'7d'});res.json({token,user:{id,name,role:'customer'}});});
router.post('/login',async(req,res)=>{const {email,password}=req.body;await db.read();const u=db.data.users.find(x=>x.email.toLowerCase()===email.toLowerCase());if(!u)return res.status(401).json({error:'Invalid'});const ok=await bcrypt.compare(password,u.passwordHash);if(!ok)return res.status(401).json({error:'Invalid'});const token=jwt.sign({sub:u.id,role:u.role,name:u.name},JWT_SECRET,{expiresIn:'7d'});res.json({token,user:{id:u.id,role:u.role,name:u.name}});});
export default router;